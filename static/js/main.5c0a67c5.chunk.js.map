{"version":3,"sources":["helpers.js","api.js","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","response","json","catch","error","BASE_URL","Todo","onUserSelect","selectedUserId","completed","userId","title","onClick","className","classNames","type","readOnly","TodoList","state","todos","loadedTodos","query","option","queryHandler","event","curentValue","target","value","setState","handleChange","name","filterByOption","filteredTodos","completedTodos","filter","todo","uncompletedTodos","filterList","querySelector","console","log","toLowerCase","includes","a","data","Object","values","some","field","this","_","prevState","props","placeholder","onChange","disabled","map","key","id","React","Component","CurrentUser","selectedUserDetails","userError","handleClickClear","onReset","loadData","prevProps","selectedUser","email","phone","App","selectUserHandler","ReactDOM","render","document","getElementById"],"mappings":"2XAAaA,EAAU,SAAAC,GAAG,OACxBC,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIA,MCDdC,EAAW,iC,oBCEJC,EAAO,SAAC,GAAD,IAClBC,EADkB,EAClBA,aACAC,EAFkB,EAElBA,eACAC,EAHkB,EAGlBA,UACAC,EAJkB,EAIlBA,OACAC,EALkB,EAKlBA,MALkB,OAMhB,wBACEC,QAAS,kBAAML,EAAaG,IAC5BG,UAAWC,IAAW,iBAAkB,CACtC,0BAA2BL,EAC3B,6BAA8BA,KAGhC,+BACE,2BAAOM,KAAK,WAAWC,UAAQ,IAC/B,2BAAIL,IAGN,4BACEE,UAAWC,IAAW,yCACS,CAC7B,kCAAmCJ,IAAWF,IAEhDO,KAAK,UALP,SAQGL,KCxBIO,G,MAAb,4MACEC,MAAQ,CACNC,MAAO,GACPC,YAAa,GACbC,MAAO,GACPC,OAAQ,IALZ,EA6BEC,aAAe,SAACC,GACd,IAAMC,EAAcD,EAAME,OAAOC,MAEjC,EAAKC,SAAS,CAAEP,MAAOI,KAhC3B,EAmCEI,aAAe,SAACL,GAAW,IAAD,EACAA,EAAME,OAAtBI,EADgB,EAChBA,KAAMH,EADU,EACVA,MAEd,EAAKC,SAAL,eAAiBE,EAAOH,KAtC5B,EAyCEI,eAAiB,SAACC,EAAeV,GAC/B,IAAMW,EAAiBD,EAAcE,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,aACnD2B,EAAmBJ,EAAcE,QAAO,SAAAC,GAAI,OAAKA,EAAK1B,aAE5D,OAAQa,GACN,IAAK,MACH,OAAO,EAET,IAAK,YACH,OAAO,EAAKM,SAAS,CACnBT,MAAOc,IAGX,IAAK,cACH,OAAO,EAAKL,SAAS,CACnBT,MAAOiB,IAGX,QAAS,OAAO,IA3DtB,EA+DEC,WAAa,SAACC,EAAehB,GAC3BiB,QAAQC,IAAIF,GAD0B,IAIhCN,EAFkB,EAAKd,MAArBE,YAE0Bc,QAAO,SAACC,GACtC,IAAMxB,EAAQwB,EAAKxB,MAAM8B,cACnBpB,EAAQiB,EAAcG,cAE5B,OAAO9B,EAAM+B,SAASrB,MAG1B,EAAKO,SAAS,CACVT,MAAQa,IACP,kBAAM,EAAKD,eAAeC,EAAeV,OA5ElD,8FAQE,4BAAAqB,EAAA,sEFTO9C,EAAQ,GAAD,OAAIQ,EAAJ,WACXL,MAAK,SAAAC,GAAQ,OAAIA,EAAS2C,KAAKV,QAAO,SAACC,GACtC,OAAIU,OAAOC,OAAOX,GACfY,MAAK,SAAAC,GAAK,OAAc,OAAVA,GAA4B,KAAVA,MAI5Bb,QAERnC,MAAK,SAAAC,GAAQ,OAAIA,KEApB,OACQkB,EADR,OAGE8B,KAAKrB,SAAS,CACZT,QACAC,YAAaD,IALjB,gDARF,sFAiBE,SAAmB+B,EAAGC,GAAW,IAAD,EACLF,KAAK/B,MAAtBI,EADsB,EACtBA,OAAQD,EADc,EACdA,MAEZ8B,EAAU7B,SAAWA,GACvB2B,KAAKZ,WAAWhB,EAAOC,GAGrB6B,EAAU9B,QAAUA,GACtB4B,KAAKZ,WAAWhB,EAAOC,KAzB7B,oBA+EE,WAAU,IAAD,EACkC2B,KAAKG,MAAtC7C,EADD,EACCA,aAAcC,EADf,EACeA,eADf,EAEkByC,KAAK/B,MAAtBC,EAFD,EAECA,MAAOE,EAFR,EAEQA,MAIf,OAFAkB,QAAQC,IAAIrB,GAGV,yBAAKN,UAAU,YACb,sCAEA,yBAAKA,UAAU,4BACb,0CACW,IACT,2BACEE,KAAK,OACLsC,YAAY,YACZvB,KAAK,QACLH,MAAON,EACPiC,SAAUL,KAAK1B,gBAGnB,4BACEI,MAAOsB,KAAK/B,MAAMI,OAClBQ,KAAK,SACLwB,SAAUL,KAAKpB,cAEf,4BAAQF,MAAM,UAAU4B,UAAQ,GAAhC,oBAGA,4BACE5B,MAAM,aADR,aAKA,4BAAQA,MAAM,eAAd,eAGA,4BAAQA,MAAM,OAAd,QAIF,wBAAId,UAAU,kBACXM,EAAMqC,KAAI,SAAArB,GAAI,OACb,kBAAC,EAAD,CACEsB,IAAKtB,EAAKuB,GACVnD,aAAcA,EACdC,eAAgBA,EAChBC,UAAW0B,EAAK1B,UAChBC,OAAQyB,EAAKzB,OACbC,MAAOwB,EAAKxB,kBAhI5B,GAA8BgD,IAAMC,YCDvBC,G,MAAb,4MACE3C,MAAQ,CACN4C,oBAAqB,GACrBC,WAAW,GAHf,EAgBEC,iBAAmB,WACjB,EAAKZ,MAAMa,QAAQ,IAjBvB,uDAME,WACEhB,KAAKiB,aAPT,gCAUE,SAAmBC,GACbA,EAAUzD,SAAWuC,KAAKG,MAAM1C,QAClCuC,KAAKiB,aAZX,6DAoBE,4BAAAvB,EAAA,sEHRuBjC,EGSeuC,KAAKG,MAAM1C,OHR1Cb,EAAQ,GAAD,OAAIQ,EAAJ,kBAAsBK,IGOpC,UAG4B,QAFpB0D,EADR,QAGmBxB,KAHnB,uBAIIK,KAAKrB,SAAS,CAAEmC,WAAW,IAJ/B,mBAMW,GANX,OASEd,KAAKrB,SAAS,CACZkC,oBAAqBM,EAAaxB,KAClCmB,WAAW,IAXf,iCHRK,IAAkBrD,IGQvB,YApBF,0EAmCE,WAAU,IACAA,EAAWuC,KAAKG,MAAhB1C,OACAqD,EAAcd,KAAK/B,MAAnB6C,UAFD,EAGwBd,KAAK/B,MAAM4C,oBAAlChC,EAHD,EAGCA,KAAMuC,EAHP,EAGOA,MAAOC,EAHd,EAGcA,MAErB,OAEE,oCACGP,EACC,yBAAKlD,UAAU,eACb,wBAAIA,UAAU,sBAAqB,gDAInC,yBAAKA,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEGH,IAIL,wBAAIG,UAAU,qBAAqBiB,GACnC,uBAAGjB,UAAU,sBAAsBwD,GACnC,uBAAGxD,UAAU,sBAAsByD,IAIzC,4BACEvD,KAAK,SACLH,QAASqC,KAAKe,kBAFhB,cA/DR,GAAiCL,IAAMC,YCuCxBW,E,4MArCbrD,MAAQ,CACNV,eAAgB,G,EAGlBgE,kBAAoB,SAAC9D,GACfA,IAAW,EAAKQ,MAAMV,gBACxB,EAAKoB,SAAS,CAAEpB,eAAgBE,K,4CAIpC,WAAU,IACAF,EAAmByC,KAAK/B,MAAxBV,eAER,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEL,eAAgBA,EAChBD,aAAc0C,KAAKuB,qBAIvB,yBAAK3D,UAAU,gBACb,yBAAKA,UAAU,0BACZL,EACC,kBAAC,EAAD,CACEE,OAAQF,EACRyD,QAAShB,KAAKuB,oBAEd,0B,GA9BEb,IAAMC,WCFxBa,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.5c0a67c5.chunk.js","sourcesContent":["export const request = url => (\n  fetch(url)\n    .then(response => response.json())\n    .catch(error => error)\n);\n","import { request } from './helpers';\n\nconst BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function loadTodos() {\n  return request(`${BASE_URL}/todos`)\n    .then(response => response.data.filter((todo) => {\n      if (Object.values(todo)\n        .some(field => field === null || field === '')) {\n        return false;\n      }\n\n      return todo;\n    }))\n    .then(response => response);\n}\n\nexport function loadUser(userId) {\n  return request(`${BASE_URL}/users/${userId}`);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Todo = ({\n  onUserSelect,\n  selectedUserId,\n  completed,\n  userId,\n  title }) => (\n    <li\n      onClick={() => onUserSelect(userId)}\n      className={classNames(`TodoList__item`, {\n        'TodoList__item--checked': completed,\n        'TodoList__item--unchecked': !completed,\n      })}\n    >\n      <label>\n        <input type=\"checkbox\" readOnly />\n        <p>{title}</p>\n      </label>\n\n      <button\n        className={classNames(`\n        TodoList__user-button button`, {\n          'TodoList__user-button--selected': userId === selectedUserId,\n        })}\n        type=\"button\"\n      >\n        User #\n        {userId}\n      </button>\n    </li>\n);\n\nTodo.propTypes = {\n  onUserSelect: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { loadTodos } from '../../api';\nimport { Todo } from '../Todo/Todo';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    todos: [],\n    loadedTodos: [],\n    query: '',\n    option: '',\n  }\n\n  async componentDidMount() {\n    const todos = await loadTodos();\n\n    this.setState({\n      todos,\n      loadedTodos: todos,\n    });\n  }\n\n  componentDidUpdate(_, prevState){\n    const { option, query} = this.state;\n\n    if (prevState.option !== option) {\n      this.filterList(query, option)\n    }\n\n    if (prevState.query !== query) {\n      this.filterList(query, option)\n    }\n  }\n\n  queryHandler = (event) => {\n    const curentValue = event.target.value;\n\n    this.setState({ query: curentValue });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  filterByOption = (filteredTodos, option) => {\n    const completedTodos = filteredTodos.filter(todo => todo.completed);\n    const uncompletedTodos = filteredTodos.filter(todo => !todo.completed);\n\n    switch (option) {\n      case 'all':\n        return true;\n\n      case 'completed':\n        return this.setState({\n          todos: completedTodos,\n        });\n\n      case 'uncompleted':\n        return this.setState({\n          todos: uncompletedTodos,\n        });\n\n      default: return true;\n    }\n  }\n\n  filterList = (querySelector, option) => {\n    console.log(querySelector);\n    const { loadedTodos } = this.state;\n\n    const filteredTodos = loadedTodos.filter((todo) => {\n        const title = todo.title.toLowerCase();\n        const query = querySelector.toLowerCase();\n\n        return title.includes(query)\n      })\n\n    this.setState({\n        todos:  filteredTodos\n      }, () => this.filterByOption(filteredTodos, option))\n  }\n\n  render() {\n    const { onUserSelect, selectedUserId } = this.props;\n    const { todos, query } = this.state;\n\n    console.log(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <label>\n            Search: {' '}\n            <input\n              type=\"text\"\n              placeholder=\"find ToDo\"\n              name=\"query\"\n              value={query}\n              onChange={this.queryHandler}\n            />\n          </label>\n          <select\n            value={this.state.option}\n            name=\"option\"\n            onChange={this.handleChange}\n          >\n            <option value=\"initial\" disabled>\n              choose parameter\n            </option>\n            <option\n              value=\"completed\"\n            >\n              completed\n            </option>\n            <option value=\"uncompleted\">\n              uncompleted\n            </option>\n            <option value=\"all\">\n              all\n            </option>\n          </select>\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <Todo\n                key={todo.id}\n                onUserSelect={onUserSelect}\n                selectedUserId={selectedUserId}\n                completed={todo.completed}\n                userId={todo.userId}\n                title={todo.title}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  onUserSelect: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { loadUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUserDetails: [],\n    userError: false,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  handleClickClear = () => {\n    this.props.onReset(0);\n  }\n\n  async loadData() {\n    const selectedUser = await loadUser(this.props.userId);\n\n    if (selectedUser.data === null) {\n      this.setState({ userError: true });\n\n      return false;\n    }\n\n    this.setState({\n      selectedUserDetails: selectedUser.data,\n      userError: false,\n    });\n  }\n\n  render() {\n    const { userId } = this.props;\n    const { userError } = this.state;\n    const { name, email, phone } = this.state.selectedUserDetails;\n\n    return (\n\n      <>\n        {userError ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>Invalid User</span></h2>\n          </div>\n        )\n          : (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {userId}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{name}</h3>\n              <p className=\"CurrentUser__email\">{email}</p>\n              <p className=\"CurrentUser__phone\">{phone}</p>\n            </div>\n          )\n      }\n        <button\n          type=\"button\"\n          onClick={this.handleClickClear}\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onReset: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    selectedUserId: 0,\n  };\n\n  selectUserHandler = (userId) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({ selectedUserId: userId });\n    }\n  }\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            onUserSelect={this.selectUserHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onReset={this.selectUserHandler}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}